* Setup

Add the working directory of this repository to the load path (adapt the path to the repo's root directory if that is different on the respective machine)
#+begin_src elisp :results silent
  (add-to-list 'load-path (expand-file-name "~/repos/csharp-babel"))
#+end_src

Add the language to the loaded ones
#+begin_src elisp :results silent
  (add-to-list 'org-babel-load-languages '(csharp . t))
#+end_src


* Variable Types
#+begin_src csharp :session none :project "type-tests" :namespace "wow" :var a=3 b="pizza" c=5.3 d=-1
  int myInt = 1;
  string PrintTypeVal<T>(T tp)
  {
      return $"{tp.GetType().ToString()} {tp}";
  }

  var myString = $"{PrintTypeVal(myInt)}\n{PrintTypeVal(a)}\n{PrintTypeVal(b)}\n{PrintTypeVal(c)}\n{PrintTypeVal(d)}";

  Console.WriteLine(myString);

#+end_src

#+RESULTS:
| System.Int32  |     1 |
| System.Int32  |     3 |
| System.String | pizza |
| System.Double |   5.3 |
| System.Int32  |    -1 |


* List Outputs
#+begin_src csharp :results raw list
  Console.WriteLine("Item 1");
  Console.WriteLine("Item 2");
  Console.WriteLine("Item 3");
  Console.WriteLine("Item 4");
#+end_src

#+RESULTS:
- Item 1
- Item 2
- Item 3
- Item 4


* Custom Output Directory
#+begin_src csharp :dir "./csharp-codeblock-eval" :results raw list
  Console.WriteLine("Outputs in the subdirectory 'csharp-codeblock-eval'\nof the current working dir");
#+end_src

#+RESULTS:
- Outputs in the subdirectory 'csharp-codeblock-eval'
- of the current working dir



* Class Library
#+begin_src csharp :main no :class "no" :project "external-test" :namespace "oha" :project-type "class"
  public class Printer
  {
      static public void WriteInt(int writeInt)
      {
          Console.WriteLine(writeInt);
      }
  }
#+end_src

#+RESULTS:



#+begin_src csharp :main no :references '( "./external-test/external-test.csproj") :class "Prog" :usings '("oha")
  internal interface ITest
  {
      public int MyInt { get; set; }
  }

  internal interface IStringTest
  {
      public string MyString { get; set; }
  }

  internal class TestClass : ITest, IStringTest
  {
      public TestClass()
      {
          this.MyInt = 17;
          this.MyString = "My Integer ";
      }

      public int MyInt { get; set; }

      public string MyString { get; set; }
  }

  public static void Main(string[] args)
  {
      TestClass myTest = new TestClass();
      Printer.WriteInt(myTest.MyInt);
  }
#+end_src

#+RESULTS:
: 17


* Tabular Output
#+begin_src csharp :results table
  var test = "String";
  Console.WriteLine($"{test}, no, such, thing, as, a, fish");
#+end_src

#+RESULTS:
| String | no | such | thing | as | a | fish |


* NuGet Package references
#+begin_src csharp :references '(("Newtonsoft.Json" . "13.0.3")) :usings '("System" "Newtonsoft.Json") :main no :project "json-test" :results raw
  public class DTO
  {
      public int TheInt { get; set; }
      public string TheString { get; set; }
  }

  static void Main(string[] args)
  {
      DTO myDto = new() { TheInt = 12, TheString = "ok" };

      string json = JsonConvert.SerializeObject(myDto, Formatting.Indented);
      Console.WriteLine($"{json}");
  }
#+end_src

#+RESULTS:
{
  "TheInt": 12,
  "TheString": "ok"
}


* others
#+begin_src C++ :includes '(<iostream>) :results table :var a=1
  std::cout << "no, such, thing, as, a, fish";
#+end_src

#+RESULTS:
| no | such | thing | as | a | fish |


#+begin_src C++
  int i = 1;
#+end_src

#+RESULTS:

#+begin_src java
  System.out.println("Console is: " + System.console());
#+end_src

#+RESULTS:
: Console is: java.io.ProxyingConsole@36d4b5c
